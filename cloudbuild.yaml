# This Cloud Build configuration file automates the deployment of the
# custom HAPI FHIR server to Cloud Run.

steps:
  # Step 1: Build the Java application using Maven.
  # This step is crucial because it packages your application along with the
  # required Cloud SQL Socket Factory dependency into a .war file.
  # We use the official Maven cloud builder for this.
  - name: 'gcr.io/cloud-builders/mvn'
    id: 'maven-build'
    entrypoint: 'mvn'
    args: ['clean', 'install', '-DskipTests']

  # Step 2: Build the custom Docker image.
  # This step uses the application code and the .war file created by Maven
  # in the previous step to build the final container image.
  - name: 'gcr.io/cloud-builders/docker'
    id: 'docker-build'
    waitFor: ['maven-build'] # Wait for the Maven build to finish
    args:
      - 'build'
      - '--tag'
      - '${_REGISTRY_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REGISTRY_REPOSITORY}/${_SERVICE_NAME}'
      - '.'

  # Step 3: Push the Docker image to Google Artifact Registry.
  - name: 'gcr.io/cloud-builders/docker'
    id: 'docker-push'
    waitFor: ['docker-build']
    args:
      - 'push'
      - '${_REGISTRY_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REGISTRY_REPOSITORY}/${_SERVICE_NAME}'

  # Step 4: Deploy the new image to Cloud Run.
  # This step takes the image we just pushed and deploys it as a new revision
  # of our Cloud Run service, applying all necessary configurations.
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'gcloud-run-deploy'
    waitFor: ['docker-push']
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}'
      - '--image'
      - '${_REGISTRY_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REGISTRY_REPOSITORY}/${_SERVICE_NAME}'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      - --service-account
      - $_SERVICE_ACCOUNT
      # -- Secrets Configuration --
      # -- HAPI FHIR Specific Settings --
      - '--port=8080'
      - '--memory=4Gi'
      - '--cpu=2'
      - '--timeout=900s' # Increase timeout for a large application
      # -- Cloud SQL Connection --
      # The service account needs "Cloud SQL Client" role.
      - '--add-cloudsql-instances=${_INSTANCE_CONNECTION_NAME}'
      # The service account needs "Secret Manager Secret Accessor" role.
      # Mount the 'hapi-application-yaml' secret as a volume at the /configs path.
      - '--update-secrets=/configs/hapi.application.yaml=hapi-application-yaml:latest'
      # -- Environment Variables --
      # This is the critical variable that tells Tomcat/HAPI where to find the mounted config file.
      - '--set-env-vars=CATALINA_OPTS=-Dspring.config.location=file:///configs/hapi.application.yaml'

# This specifies which image was built, allowing it to be seen in the build summary.
images:
  - '${_REGISTRY_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REGISTRY_REPOSITORY}/${_SERVICE_NAME}'

# Default timeout for the entire build.
timeout: '1200s'

# Define substitution variables that can be set when you trigger the build.
substitutions:
  _REGISTRY_LOCATION: 'southamerica-east1'
  _REGISTRY_REPOSITORY: 'docker'
  _REGION: 'southamerica-west1'
  _SERVICE_NAME: 'hapi-fhir-server'
  _INSTANCE_CONNECTION_NAME: 'ceroai:southamerica-west1:integracion-rayen-avis'